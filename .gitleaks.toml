title = "SkiConnect Gitleaks Configuration"

# Allowlist patterns to exclude certain files from scanning
# These files often contain test credentials or development-specific configurations
[[allowlist]]
description = "Exclude development, test, and staging property files"
paths = [
    "src/main/resources/application-dev.properties",
    "src/main/resources/application-test.properties",
    "src/main/resources/application-staging.properties"
]

# Rule to detect generic API keys, tokens, and secrets
# This pattern matches common variable names for API keys and their values
# Example: api_key="1234567890abcdef" or token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9
[[rules]]
id = "generic-api-key"
description = "Generic API Key"
regex = '''(?i)(api[_-]?key|apikey|access[_-]?key|accesskey|auth[_-]?key|authkey|client[_-]?id|clientid|client[_-]?secret|clientsecret|secret[_-]?key|secretkey|token|jwt[_-]?secret|jwtsecret)['\"]?\s*[:=]\s*['"]?([a-zA-Z0-9-_=]{8,64})['"]?'''
secretGroup = 2

# Rule to detect JWT tokens in the code
# This pattern matches the standard JWT format: header.payload.signature
# Example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
[[rules]]
id = "jwt-token"
description = "JWT Token"
regex = '''eyJ[a-zA-Z0-9_-]{5,}\.eyJ[a-zA-Z0-9_-]{5,}\.[a-zA-Z0-9_-]{5,}'''
secretGroup = 0

# Rule to detect hardcoded passwords in the code
# This pattern matches password variables and their values
# Example: password="mySecurePassword123" or pwd=ComplexP@ssw0rd
[[rules]]
id = "password-in-code"
description = "Password in code"
regex = '''(?i)(password|passwd|pwd)['\"]?\s*[:=]\s*['"]?([^'"]{8,})['"]?'''
secretGroup = 2

# Rule to detect private keys in the code
# This pattern matches RSA and other private key formats
# Example: -----BEGIN RSA PRIVATE KEY-----\nMIIEpAIBAAKCAQEA...\n-----END RSA PRIVATE KEY-----
[[rules]]
id = "private-key"
description = "Private Key"
regex = '''-----BEGIN (?:RSA )?PRIVATE KEY-----\s*([a-zA-Z0-9+/=\s]+)\s*-----END (?:RSA )?PRIVATE KEY-----'''
secretGroup = 1

# Rule to detect AWS access keys
# This pattern matches AWS access key IDs
# Example: AKIAIOSFODNN7EXAMPLE
[[rules]]
id = "aws-access-key"
description = "AWS Access Key"
regex = '''(A3T[A-Z0-9]|AKIA|AGPA|AIDA|APOA|AIPA|ANPA|ANVA|ASIA)[A-Z0-9]{16}'''
secretGroup = 0

# Rule to detect AWS secret keys
# This pattern matches AWS secret access keys
# Example: aws_secret_key="wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY"
[[rules]]
id = "aws-secret-key"
description = "AWS Secret Key"
regex = '''(?i)aws[_-]?(?:access[_-]?)?key[_-]?(?:id)?['\"]?\s*[:=]\s*['"]?([A-Za-z0-9/+=]{40})['"]?'''
secretGroup = 1

# Rule to detect database connection strings
# This pattern matches various database connection strings
# Example: jdbc:mysql://localhost:3306/mydb or mongodb://user:pass@host:27017/db
[[rules]]
id = "database-connection-string"
description = "Database Connection String"
regex = '''(?:jdbc:|mongodb:|mysql:|postgresql:|redis:)(?:[^:@]+@)?(?:[^:]+):(?:[0-9]+)/(?:[^?]+)'''
secretGroup = 0 