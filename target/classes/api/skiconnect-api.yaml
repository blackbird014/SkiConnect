openapi: 3.0.3
info:
  title: SkiConnect API
  description: API for connecting ski teachers with students, with role-based access and place-based search.
  version: 1.0.0
servers:
  - url: http://<host>:<port>/api/v1
paths:
  /places:
    post:
      summary: Create a new place (admin only)
      operationId: createPlace
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlaceRequest'
      responses:
        '201':
          description: Place created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlaceResponse'
  /users:
    post:
      summary: Create a new user with optional CV (admin only)
      operationId: createUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
      responses:
        '201':
          description: User created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
  /users/{userId}/roles:
    post:
      summary: Assign a role to a user (admin only)
      operationId: assignRole
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        required: true  content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleAssignmentRequest'
      responses:
        '200':
          description: Role assigned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserRolesResponse'
  /lessons:
    post:
      summary: Create lesson availability (ski_school only)
      operationId: createLesson
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LessonRequest'
      responses:
        '201':
          description: Lesson created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LessonResponse'
    get:
      summary: List lessons (filtered by role in future)
      operationId: listLessons
      parameters:
        - name: school_id
          in: query
          required: false
          schema:
            type: integer
            format: int32
        - name: teacher_id
          in: query
          required: false
          schema:
            type: integer
            format: int32
        - name: place_id
          in: query
          required: false
          schema:
            type: integer
            format: int32
        - name: status
          in: query
          required: false
          schema:
            type: string
            enum: [available, booked]
      responses:
        '200':
          description: List of lessons
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LessonListResponse'
  /lessons/{lessonId}/book:
    post:
      summary: Book a lesson (student/student_group)
      operationId: bookLesson
      parameters:
        - name: lessonId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookLessonRequest'
      responses:
        '200':
          description: Lesson booked
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LessonResponse'
  /search:
    get:
      summary: Search schools and teachers by place
      operationId: searchByPlace
      parameters:
        - name: place_id
          in: query
          required: true
          schema:
            type: integer
            format: int32
        - name: type
          in: query
          required: false
          schema:
            type: string
            enum: [schools, teachers]
      responses:
        '200':
          description: Search results with CVs
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchResponse'
components:
  schemas:
    PlaceRequest:
      type: object
      required: [name, location]
      properties:
        name:
          type: string
          example: "Snowpeak Resort"
        location:
          type: string
          example: "North Slope"
    PlaceResponse:
      type: object
      properties:
        id:
          type: integer
          format: int32
          example: 1
        name:
          type: string
          example: "Snowpeak Resort"
        location:
          type: string
          example: "North Slope"
    UserRequest:
      type: object
      required: [name, email]
      properties:
        name:
          type: string
          example: "John Doe"
        email:
          type: string
          example: "john@example.com"
        cv:
          type: object
          properties:
            experience:
              type: string
              example: "5 years teaching at Snowpeak"
            qualifications:
              type: string
              example: "Level 2 Ski Instructor"
            bio:
              type: string
              example: "Passionate about teaching beginners"
    UserResponse:
      type: object
      properties:
        id:
          type: integer
          format: int32
          example: 1
        name:
          type: string
          example: "John Doe"
        email:
          type: string
          example: "john@example.com"
        cv:
          $ref: '#/components/schemas/CV'
    RoleAssignmentRequest:
      type: object
      required: [role_id]
      properties:
        role_id:
          type: integer
          format: int32
          example: 1
    UserRolesResponse:
      type: object
      properties:
        user_id:
          type: integer
          format: int32
          example: 1
        roles:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
                format: int32
                example: 1
              name:
                type: string
                example: "ski_teacher"
    LessonRequest:
      type: object
      required: [school_id, place_id, date, duration_minutes]
      properties:
        school_id:
          type: integer
          format: int32
          example: 1
        teacher_id:
          type: integer
          format: int32
          nullable: true
          example: null
        place_id:
          type: integer
          format: int32
          example: 1
        date:
          type: string
          format: date-time
          example: "2025-04-10T10:00:00Z"
        duration_minutes:
          type: integer
          format: int32
          example: 60
    LessonResponse:
      type: object
      properties:
        id:
          type: integer
          format: int32
          example: 1
        school_id:
          type: integer
          format: int32
          example: 1
        teacher_id:
          type: integer
          format: int32
          nullable: true
          example: null
        place_id:
          type: integer
          format: int32
          example: 1
        student_id:
          type: integer
          format: int32
          nullable: true
          example: null
        date:
          type: string
          format: date-time
          example: "2025-04-10T10:00:00Z"
        status:
          type: string
          enum: [available, booked]
          example: "available"
        duration_minutes:
          type: integer
          format: int32
          example: 60
    LessonListResponse:
      type: object
      properties:
        lessons:
          type: array
          items:
            $ref: '#/components/schemas/LessonResponse'
        total:
          type: integer
          format: int32
          example: 1
    BookLessonRequest:
      type: object
      required: [student_id]
      properties:
        student_id:
          type: integer
          format: int32
          example: 3
    SearchResponse:
      type: object
      properties:
        schools:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
                format: int32
                example: 1
              name:
                type: string
                example: "Peak Ski School"
              email:
                type: string
                example: "peak@example.com"
              cv:
                $ref: '#/components/schemas/CV'
              available_lessons:
                type: integer
                format: int32
                example: 3
        teachers:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
                format: int32
                example: 2
              name:
                type: string
                example: "John Doe"
              email:
                type: string
                example: "john@example.com"
              cv:
                $ref: '#/components/schemas/CV'
              available_lessons:
                type: integer
                format: int32
                example: 1
              school_id:
                type: integer
                format: int32
                example: 1
        total_schools:
          type: integer
          format: int32
          example: 1
        total_teachers:
          type: integer
          format: int32
          example: 1
    CV:
      type: object
      properties:
        experience:
          type: string
          example: "5 years teaching at Snowpeak"
        qualifications:
          type: string
          example: "Level 2 Ski Instructor"
        bio:
          type: string
          example: "Passionate about teaching beginners"
